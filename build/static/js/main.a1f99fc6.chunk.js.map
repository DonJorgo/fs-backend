{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","response","request","then","res","data","personService","getAll","axios","get","create","newPerson","post","remove","person","delete","id","update","updatedPerson","put","Filter","value","onChange","PersonForm","props","onSubmit","name","onNameChange","number","onNumberChange","type","Persons","persons","onRemove","map","onClick","Notification","message","isError","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filterString","setFilterString","notification","setNotification","useEffect","initialPersons","personsToShow","filter","toLowerCase","includes","notify","setTimeout","notifyError","event","target","preventDefault","some","question","window","confirm","find","p","changedPerson","returnedPerson","catch","error","updatePerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1f99fc6.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\n\nconst response = request => request.then(res => res.data)\n\n\nconst getAll = () =>\n    response(axios.get(baseUrl))\n\nconst create = newPerson =>\n    response(axios.post(baseUrl, newPerson))\n\nconst remove = person =>\n    axios.delete(`${baseUrl}/${person.id}`)\n\nconst update = (id, updatedPerson) =>\n    response(axios.put(`${baseUrl}/${id}`, updatedPerson))\n\n\nconst personService = { getAll, create, remove, update }\nexport default personService","import React from 'react'\n\nconst Filter = ({ value, onChange }) =>\n    <div>\n        filter shown with\n            <input\n            value={value}\n            onChange={onChange}\n        />\n    </div>\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) =>\n    <form onSubmit={props.onSubmit}>\n        <div>\n            name:\n            <input\n                value={props.name}\n                onChange={props.onNameChange}\n            />\n        </div>\n\n        <div>\n            number:\n            <input\n                value={props.number}\n                onChange={props.onNumberChange}\n            />\n        </div>\n\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n\n    </form>\n\n\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({ persons, onRemove }) =>\n    <div>\n        {persons.map(({ name, number, id }) =>\n            <div key={name}>\n                {name} {number}\n                <button onClick={() => onRemove({ name, id })}>\n                    delete\n                </button>\n            </div>\n\n        )}\n    </div>\n\nexport default Persons","import './notification.css'\n\nconst Notification = ({ message, isError }) => {\n\n    if (message == null) {\n        return null\n    }\n\n    return (\n        <div className={`notification ${isError ? 'error' : 'success'}`}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\n\nimport personService from './services/persons'\n\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterString, setFilterString] = useState('')\n  const [notification, setNotification] = useState({ message: null })\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const personsToShow = persons.filter(person =>\n    person.name.toLowerCase().includes(filterString.toLowerCase())\n  )\n\n\n  const notify = (message, isError = false) => {\n    setNotification({ message, isError })\n    setTimeout(() => {\n      setNotification({ message: null })\n    }, 5000)\n  }\n\n  const notifyError = (message) => notify(message, true)\n\n  const handleFilterChange = event => {\n    setFilterString(event.target.value)\n  }\n\n\n  const handlePersonSubmit = event => {\n\n    const newNameExists = () =>\n      persons.some(({ name }) => name === newName)\n\n    const createPerson = () => {\n      personService\n        .create({\n          name: newName,\n          number: newNumber\n        })\n        .then(returnedPerson => {\n          notify(`Added ${returnedPerson.name}`)\n          setPersons(persons.concat(returnedPerson))\n        })\n        .catch(error => {\n          const message = error.response.data.error\n          notifyError(message)\n        })\n    }\n\n    const updatePerson = () => {\n      const person = persons.find(p => p.name === newName)\n      const changedPerson = { ...person, number: newNumber }\n      personService\n        .update(person.id, changedPerson)\n        .then(returnedPerson => {\n          notify(`${returnedPerson.name} number changed from ${person.number} to ${returnedPerson.number}`)\n          setPersons(persons.map(p =>\n            p.id !== person.id ? p : returnedPerson)\n          )\n        })\n        .catch(error => {\n          notifyError(`Information of ${person.name} has already been removed from server`)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n\n    event.preventDefault()\n    if (!newNameExists()) {\n      createPerson()\n    } else {\n      const question = `${newName} is already added to phonebook, replace the old number with a new one?`\n      if (window.confirm(question)) {\n        updatePerson()\n      }\n    }\n  }\n\n\n  const handleNameChange = event => {\n    setNewName(event.target.value)\n  }\n\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value)\n  }\n\n\n  const handleRemove = person => {\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      personService\n        .remove(person)\n        .then(() => {\n          notify(`${person.name} removed succesfully`)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={notification.message}\n        isError={notification.isError}\n      />\n      <Filter\n        value={filterString}\n        onChange={handleFilterChange}\n      />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        onSubmit={handlePersonSubmit}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons persons={personsToShow} onRemove={handleRemove} />\n\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}